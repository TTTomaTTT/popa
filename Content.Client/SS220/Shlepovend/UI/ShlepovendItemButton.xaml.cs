// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Shared.SS220.Shlepovend;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.Shlepovend.UI;

[GenerateTypedNameReferences]
public sealed partial class ShlepovendItemButton : ContainerButton
{
    [Dependency] private readonly IEntityManager _entMan = default!;

    private static readonly Color ColorNormal = Color.FromHex("#7b7e9e");
    private static readonly Color ColorHovered = Color.FromHex("#9699bb");
    private static readonly Color ColorPressed = Color.FromHex("#789B8C");
    private static readonly Color ColorInvactive = Color.FromHex("#6E6F7E");

    private readonly StyleBoxFlat _styleBox = new()
    {
        BackgroundColor = ColorNormal,
    };

    public EntProtoId? ItemPrototypeId { get; private set; }
    public ProtoId<ShlepaRewardGroupPrototype>? GroupProtoId;
    private EntityUid? _itemInstance;

    private int _price;
    public int Price
    {
        get => _price;
        set
        {
            _price = value;
            PriceLabel.Text = Loc.GetString("shlepovend-price", ("tokens", value));
        }
    }

    public ShlepovendItemButton()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        Panel.PanelOverride = _styleBox;
    }

    public void SetItem(EntProtoId? protoId)
    {
        ItemPrototypeId = protoId;

        if (_itemInstance != null)
        {
            ItemView.SetEntity(null);
            _entMan.QueueDeleteEntity(_itemInstance);
        }

        if (protoId != null)
        {
            _itemInstance = _entMan.SpawnEntity(protoId, MapCoordinates.Nullspace);
            ItemView.SetEntity(_itemInstance);
            var meta = _entMan.GetComponent<MetaDataComponent>(_itemInstance.Value);
            ToolTip = meta.EntityName + Environment.NewLine + meta.EntityDescription;
        }
    }

    private void UpdateColors()
    {
        switch (DrawMode)
        {
            case DrawModeEnum.Normal:
                _styleBox.BackgroundColor = ColorNormal;
                break;

            case DrawModeEnum.Pressed:
                _styleBox.BackgroundColor = ColorPressed;
                break;

            case DrawModeEnum.Hover:
                _styleBox.BackgroundColor = ColorHovered;
                break;

            case DrawModeEnum.Disabled:
                _styleBox.BackgroundColor = ColorInvactive;
                break;
        }
    }

    protected override void StylePropertiesChanged()
    {
        base.StylePropertiesChanged();
        UpdateColors();
    }

    protected override void DrawModeChanged()
    {
        base.DrawModeChanged();
        UpdateColors();
    }
}
